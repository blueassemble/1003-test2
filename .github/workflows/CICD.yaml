# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job-01:
    name: WAR_build
    # This workflow contains a single job called "build"
    
      # The type of runner that the job will run on
    runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      #steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        #- uses: actions/checkout@v2
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v2
      with:
       distribution: 'temurin' # See 'Supported distributions' for available options
       java-version: '11'
       cache: 'gradle'

    - name: Execute permission for gradle   
      run: chmod +x ./gradlew

    - name: Build with gradle
      run: ./gradlew build

    - name: Upload war file to artifact
      uses: actions/upload-artifact@v2
      with:
       name: WAR
       path: build/libs

  job-02:
    needs: job-01
    name: Build&push to DockerHub
    
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: download war file to artifact
      uses: actions/download-artifact@v2
      with:
       name: WAR

    - name: Login dockerhub
      uses: docker/login-action@v1.10.0
      with:
        username: ${{ secrets.DOCKERHUB_ID }}
        password: ${{ secrets.DOCKERHUB_PW }}

    - name: Create dockerfile
      run: | 
          cat <<EOF > dockerfile
          FROM tomcat:9.0
          COPY ./my-spring-board-0.0.1-SNAPSHOT.war /usr/local/tomcat/webapps/ROOT.war
          EXPOSE 8080
          EOF
    - name: Build images & push to DockerHub
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_ID }}/cicd_pipeline:latest

    - name: Build images & push to GCR
      uses: carbonchain/action-container-registry@v1.1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        dockerfile: ./dockerfile
        image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/cicd_pipeline:latest
        service_account_key: ${{ secrets.GCP_SA_KEY }}
